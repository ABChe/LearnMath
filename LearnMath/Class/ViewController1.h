//
//  ViewController1.h
//  LearnMath
//
//  二进制
//  Created by 车 on 2019/1/29.
//  Copyright © 2019 车. All rights reserved.
//

#import "BaseViewController.h"

@interface ViewController1 : BaseViewController

/*
 十进制计数使用 10 作为基数， 二进制使用 2 作为基数，二进制的数位就是 2^n 的形式。
 1101 = 1 * 2^3 + 1 * 2^2 + 0 * 2^1 + 1 * 2^0 = 13
 二进制表达：
          第32位为符号位 0表示正数 1表示负数
            |
            0 0 0 ... 0 0 0 0 1 1 0 1
               \  27 个 0   /
 
 计算机为什么使用二进制？
 二进制的数据表达具有抗干扰能力强、可靠性高的优点；二进制非常适合逻辑运算。
 
 二进制的移位操作
  - 左移（ << 表示）
        这里不考虑数字溢出的情况（如果进行左移操作的二进制已经超过了 32 位，左移后数字就会溢出，需要将溢出位数去除）
                          第1位
                           |
               1 0 1 0 0 1 1
              / / / / / / /
             1 0 1 0 0 1 1 0
                           |
                        第1位补0
 
        结论：二进制左移一位，其实就是将数字翻倍。
 - 右移
        分为逻辑右移和算数右移。
        逻辑右移（ >> 表示）：
                如果是原数是负数进行逻辑右移后会变成正数。
                 第32位             第1位
                   |                 |
                   1 1 0 1 0 1 ... 1 1
                    \ \ \ \ \ \     \
                   0 1 1 0 1 0 1.... 1
                   |                 |
                 符号位补0             第1位
        算术右移（ >>> 表示）：
                符号位不变，除符号位之外其它位数右移
                 第32位             第1位
                  |                 |
                  1 1 0 1 0 1 ... 1 1
                   \ \ \ \ \     \ \
                  1 1 1 0 1 0 1.... 1
                  |                 |
                符号位不变            第1位
        结论：二进制右移一位，就是将数字除以 2 并求整数商的操作。
 
 二进制的逻辑操作
 或：参与操作的位中只要有一个是 1，最终结果就是1.
 与：参与操作的位中必须全都是 1，最终结果才是 1，否则为 0.
 异或：参与操作的位相同，最终结果就是 1，否则为0.

 */

@end
